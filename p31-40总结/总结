JS条件分支语句:
    Switch语句:
        语法:
            switch(条件表达式){
                case表达式:
                    语句.....
                    break;
                case表达式:
                    语句.....
                    break;
                case表达式:
                    语句.....
                    break;
                default:
                    语句....
                    break;            
            }
        执行流程:
            switch....case...语句 or switch....default...语句
            在执行时，会依次拿case后面的表达式跟switch括号里面的值做全等比较,
                如果结果为true,则执行当前case后的所有代码。
                如果结果为false,则继续向下比较
                    如果都为false,则会执行default后的语句。
        例子：
            var num = "hello"

            //所有判断都是全等！！！ 全等！！！ 全等！！！
            switch(num){
                case 1:
                    console.log("一");
                    //使用break可以跳出switch语句
                    break;
                case 2:
                    console.log("二");
                    break;
                case 3:
                    console.log("三");
                    break;
                //相当于if里面的else
                default:
                    console.log("非法数字~~")
                    break;
            }
        
        switch语句跟if语句比较相似，但个人更喜欢if语句⁄(⁄ ⁄•⁄ω⁄•⁄ ⁄)⁄
---------------------------------------
JS中的While循环
    While语句:
        语法:
        while(条件表达式){
            语句.....
        }
    
    执行流程:
        先判断条件表达式的结果为true或false
            如果结果为true,则执行循环体(while括号里面的语句),
                循环体执行结束后，会继续判断，以此类推。
            如果结果为false,则跳过循环体
    
    创建循环的三个要素:
        1.初始化变量
        2.循环中设立条件表达式
        3.定义更新表达式，每次执行后更新初始化变量

    例子:
        //创建循环，需要三个步骤

        //1.初始化一个变量
        var i = 0;

        //2.在循环中设置一个条件表达式
        while(i < 10){
            alert(i);
            //3.定义一个更新表达式，每次更新初始化变量
            i++;    
        }

     do..while循环:
        语法:
            do{

            }while(条件表达式)
    
    -执行流程:       
        do...while语句会先执行循环体，然后在判断
            如果结果为true,则执行循环体(while括号里面的语句),
                循环体执行结束后，会继续判断，以此类推。
            如果结果为false,则跳过循环体     

    例子:
       do{
           document.write(i++ + "<br />");
       }while(i <= 10);                

    while语句跟do..while语句的区别:
        do..while语句会先执行，后判断，所以必会输出一次值
        while语句会先判断，后执行。   
----------------------------------------
JS中的for循环:
    for循环:
        在for循环中，有专门的地方供我们设置循环三要素(嘻嘻~大家还记得是那三个要素嘛~)
            1.设置初始化变量
            2.设置条件表达社
            3.设置更新表达式
    
    for循环语法:
        for(1.初始化变量; 2.条件表达式; 3.更新表达式){
            语句....
        }
    
    for循环的执行流程:
        1.执行初始化表达式，初始化变量(该过程永远只执行一次!!!)
        2.执行条件表达式；
            如果表达式结果为true,则执行循环体
            如果表达式结果为false,终止循环体(跳出循环)
        3.执行更新表达式，然后重复步骤2.
    
    小芝士:
        如果在for循环中不写任何表达式，只写两个分号(;)
            大家猜猜结果会肿么样~("▔□▔)/
        没错!就是你想的那样! 您的死循环写的真不戳~
        for(;;){
            alert("真不戳")
        }
    
    for循环的三个表达式也可以写在外面~但是记得加分号~不然会报错哒Σ(ﾟдﾟ;)
------------------------------------------------------



试一试:
1.使用switch语句完成下面要求
     对于成绩大于60分的，输出""合格". 低于60分的，输出'不合格' 

2.使用switch语句完成下面要求
    从键盘接受整数参数，如果该数为1-7,打印对应的星期，否则打印非法参数

3.使用While语句完成下面要求
    加入投资的年利率为5%,试求从1000块增长到5000块，需要花费多少年?

4.还记不记得上一次小明同学期末成绩的问题(JS学习第三章练一练if语句),使用while循环给用户多次输入机会

5.使用for循环完成下面要求
    打印1-100之间所有奇数之和

6.使用for循环完成下面要求
    打印1-100之间所有7的倍数的个数及总和

7.使用for循环完成下面要求
    水仙花数:
        水仙花数是指一个3位数，它的每个位上的数字的3次幂之和等于它本身。
            例如: 1^3 + 5^3 + 3^3 = 153）,请打印所有的水仙花数。

8.完成下面要求
    在页面中接受一个中户输入的数字，并判断该数是否是质数。
        质数： 只能被1和它自身整除的数，1不是质数也不是合数，质数必须是大于1的自然数。